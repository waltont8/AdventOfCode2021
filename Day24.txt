There are 14 blocks of instructions that all look like this:

inp w
mul x 0
add x z
mod x 26
div z 1   <- 1 or 26
add x 14  <- changes
eql x w
eql x 0
mul y 0
add y 25
mul y x
add y 1
mul z y
mul y 0
add y w   <- changes
add y 12
mul y x
add z y

The only things that change are the div instruction on line 4 which is either 1 or 26, the add to x instruction on line 5 and the add on line 15. input overwrites w, x and y are cleared before use with a mul 0.

The changing values for my input are 
1,14,12
1,10,9
1,13,8
26,-8,3
1,11,0
1,11,11
1,14,10
26,-11,13
1,14,3
26,-1,10
26,-8,10
26,-5,14
26,-16,6
26,-6,5

The first value is 26 when the second is -ve and 1 when +ve

The code seems to take your input value, add the last number, and shift it left by *26 onto z or take it off again with a div and a mod. -ve values pop and check, +ve values push. This seems to work as there are 7 of each. The extra values on the end are either added to a value before it is pushed or subtracted afterwards. I think this looks like:

push [0] + 12
push [1] + 9
push [2] + 8
compare [3]-8, pop
push [4]+0
push [5]+11
push [6] + 10
compare [7]-11, pop
push [8] 3
compare [9]-1 pop
compare [10]-8 pop
compare [11]-5 pop
compare [12]-16 pop
compare [13]-6 pop

If I fold this in half, I get

[2]+8 -8 = [3]
[6]+10 -11 = [7]
[8]+3 -1= [9]
[5]+11 -8 = [10]
[4] +0 -5 = [11]
[1] + 9 -16 = [12]
[0] +12 -6 = [13]

So for largest values, we need
 0=3
 1=9
 2=9
 3=9
 4=9
 5=6
 6=9
 7=8
 8=7
 9=9
10=9
11=4
12=2
13=9

For the smallest values, we need 1,8,1,1,6,1,2,1,1,3,4,1,1,7

Which seems to work!
